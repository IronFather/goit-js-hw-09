{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,aAAcC,SAASC,cAAe,uBACtCC,YAAaF,SAASC,cAAe,sBACrCE,cAAeH,SAASC,cAAe,wBACvCG,YAAaJ,SAASC,cAAe,iBAyBrC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACNN,EACDI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA/BTT,EAAKM,YAAYW,iBAAkB,SAEnC,SAAyBC,GACvBA,EAAEC,iBAMF,IAJA,IAAIC,EAAaC,OAAOrB,EAAKC,aAAaqB,OACtCC,EAAgBF,OAAOrB,EAAKI,YAAYkB,OACxCE,EAASH,OAAOrB,EAAKK,cAAciB,OAE9BG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCC,QAAQC,IAAIP,EAAYG,EAAeC,GAEvCjB,EAAckB,EAAGL,GAAYQ,MAAK,SAAAC,G,IAAErB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAC5CqB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IACnEyB,OAAI,SAAAL,G,IAAErB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACnBqB,EAAAhC,GAASiC,OAAOI,QAAQ,sBAAuCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAErEW,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css'\n\nconst refs = {\n  delayInputEl: document.querySelector(`input[name=\"delay\"]`),\n  stepInputEl: document.querySelector(`input[name=\"step\"]`),\n  amountInputEl: document.querySelector(`input[name=\"amount\"]`),\n  submitBtnEl: document.querySelector(`.form button`),\n};\n\n// refs.submitBtnEl.setAttribute(`disabled`,`true`); \nrefs.submitBtnEl.addEventListener(`click`, onCreatePromise);\n\nfunction onCreatePromise(e) {\n  e.preventDefault();\n\n  let firstDelay = Number(refs.delayInputEl.value);\n  let nextStepDelay = Number(refs.stepInputEl.value);\n  let amount = Number(refs.amountInputEl.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    console.log(firstDelay, nextStepDelay, amount);\n\n    createPromise(i, firstDelay).then(({position, delay}) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)})\n      .catch(({position, delay}) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)});\n\n    firstDelay += nextStepDelay;\n  };\n};\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n  \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if(shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        } \n      }, delay);\n    });\n  };\n\n// Перевірка 1\n// createPromise(4, 500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// Працює!!!\n\n// ----------------------------------------------------------------------------\n// Задание 3 - генератор промисов\n\n// В HTML есть разметка формы, в поля которой пользователь будет \n// вводить первую задержку в миллисекундах, шаг увеличения задержки \n// для каждого промиса после первого и количество промисов которое\n//  необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию \n// createPromise(position, delay) столько раз, сколько ввели \n// в поле amount. При каждом вызове передай ей номер создаваемого\n//  промиса (position) и задержку учитывая введенную пользователем\n//   первую задержку (delay) и шаг (step).\n\n// Дополни код функции createPromise так, чтобы она возвращала \n// один промис, который выполянется или отклоняется через delay \n// времени. Значением промиса должен быть объект, в котором будут \n// свойства position и delay со значениями одноименных параметров.\n// Используй начальный код функции для выбора того, что нужно \n// сделать с промисом - выполнить или отклонить.\n\n// Для отображения уведомлений пользователю вместо console.log() \n// используй библиотеку notiflix.\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delayInputEl","document","querySelector","stepInputEl","amountInputEl","submitBtnEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","firstDelay","Number","value","nextStepDelay","amount","i","console","log","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.2375a932.js.map"}